# -*- coding: utf-8 -*-
"""KTB_Day4_GenAI_실습.ipynb의 사본

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/16LJSHs5PuFHB4uV9f11k5ai_dbgR7mBy

# 파이썬 프로그래밍 II 종합 실습

collections 모듈, comprehension, logging, 정규표현식, 멀티스레딩, 멀티프로세싱을 활용합니다.

과제 1: Collections 모듈 활용

EXAMPLE_SEQUENCE 값을 활용해보세요.

1. Deque: Deque를 생성하고, 요소를 추가하고 제거하는 작업을 해보세요.

2. Namedtuple: Namedtuple을 정의하고 인스턴스를 생성해보세요.

3. Defaultdict: Defaultdict를 사용해보세요. 키가 없을 때 기본값을 설정하세요.

4. Counter: Counter를 사용해 리스트에서 각 요소의 빈도를 세어보세요.
"""

EXAMPLE_SEQUENCE = ['dog', 'cat', 'mouse', 'parrot', 'frog']

"""Deque: Deque를 생성하고, 요소를 추가하고 제거하는 작업을 해보세요."""

from collections import deque

dq = deque(['dog', 'cat', 'mouse', 'parrot', 'frog'])
dq.append('lion')
print(dq)
dq.popleft()
print(dq)

"""Namedtuple: Namedtuple을 정의하고 인스턴스를 생성해보세요."""

from collections import namedtuple

Animal = namedtuple('Animal', 'name age')
cat = Animal('cat', 3)
print(cat)
dog = Animal('dog', 5)
print(dog)
lion = Animal('lion', 10)
print(lion)

"""과제 2: Comprehension 활용

EXAMPLE_SEQUENCE 값을 활용해보세요.

1. 리스트 컴프리헨션: 숫자 리스트의 제곱값을 구하세요.

2. 딕셔너리 컴프리헨션: 키가 숫자이고 값이 그 숫자의 제곱인 딕셔너리를 생성하세요.

3. 집합 컴프리헨션: 중복된 값을 제거한 제곱값 집합을 생성하세요.
"""

EXAMPLE_SEQUENCE = [1, 4, 12, 9, 22, 5, 1, 9]

"""1. 리스트 컴프리헨션 : 숫자 리스트이 제곱값을 구하세요."""

numbers = [1,3,5,6,7]
squares = [x **2 for x in numbers]
print(squares)

if_squares = [x for x in numbers if x % 2 == 0]
print(if_squares)

"""
딕셔너리 컴프리헨션: 키가 숫자이고 값이 그 숫자의 제곱인 딕셔너리를 생성하세요."""

numbers = [1,3,5,6,7]
squares = {x : x * x for x in numbers}
print(squares)

"""
집합 컴프리헨션: 중복된 값을 제거한 제곱값 집합을 생성하세요"""

numbers = [1,2,3,4,5]
squared = {x**2 for x in numbers }

"""과제 3: Logging 활용

1. 기본 로깅 설정: 로깅을 설정하고 정보를 로깅하세요. 로그의 형태는 '시간 - 에러레벨 - 메시지' 입니다.

2. 예외 로깅: 예외가 발생했을 때 에러를 로깅하세요.
"""

import logging

logging. basicConfig(level = logging.DEBUG, format= '%(asctime)s - %(levelname)s - %(message)s')

#로깅 객체 생성
logger = logging.getLogger(__name__)

def divide(a,b):
  try :
    result = a/b
    logger.info("Division successful")
    return result
  except Exception as e :
    logger.error("Division failed - Division by zero")
    raise e

print(divide(10,2))
print(divide(10,0))

"""과제 4: 정규 표현식 사용

1. 기본 패턴 매칭: 이메일 주소를 추출하세요.

2. 기본 패턴 매칭: 비식별화를 진행하세요. ID를 앞 3글자 이외는 모두 '*'로 변경합니다.

3. 고급 패턴 매칭: HTML 태그를 제거하세요.
"""

email = "MY name is Jhin, my email is kakaotech@goorm.io"
id_list = ["jhin.lee", "lovelove123", "세종대왕만세!!", "twin에너지123", "PostModern"]
html = "<p>Hello, <b>World!</b></p>"

import re
#이메일 추출
pattern = r'\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Z|a-z]{2,}\b'
matches = re.findall(pattern, email)
print("이메일" , matches)

#비식별화
pattern_2 = re.compile(r'^(.{3}).*')
deidentified =[pattern_2.sub(lambda m: m.group(1) + '*' * (len(m.group(0)) - 3), id) for id in id_list]
print(deidentified)

# HTML 태그 제거
pattern_3 = r"<.*?>"
clean_text = re.sub(pattern_3, "", html)
print("태그 제거 후 텍스트:", clean_text)

"""과제 5: 멀티스레딩과 멀티프로세싱

1. 스레딩: 한 개의 스레드를 생성하고 실행하는 함수를 작성해주세요.

2. 멀티스레딩: 두 개의 스레드를 생성하고 실행하세요.

3. 멀티프로세싱: 두 개의 프로세스를 생성하고 실행하세요.
"""

import threading

def print_numbers():
    for i in range(10):
        print(i)

thread = threading.Thread(target = print_numbers)
thread.start()
thread. join()

import threading
import time

A = 0
def print_numbers():
    global A
    for i in range(10):
        print("i" : i)
        print("A": A)
        A += 1

        time.sleep(1)

thread1 = threading.Thread(target = print_numbers)
thread1.start()
thread1. join()

thread2 = threading.Thread(target = print_numbers)
thread2.start()
thread2. join()

import multiprocessing
import time


A  = 0
# 숫자를 출력하는 함수
def print_numbers():
    global A
    for i in range(5):
        print("i:",i)
        print("공통A: ", A)
        A+=1
        time.sleep(1)

# 두 개의 프로세스 생성 및 시작
process1 = multiprocessing.Process(target=print_numbers)
process2 = multiprocessing.Process(target=print_numbers)
process1.start()
process2.start()
process1.join()
process2.join()