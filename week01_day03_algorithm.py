# -*- coding: utf-8 -*-
"""KTB_Day3_GenAI_실습.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1oILuVpnWoSBlGOOFYoEnYuD6AHNsexX-
    """c
from unittest import result

# 파이썬 프로그래밍 종합 실습
# 기본 문법 복습, 자료형, 함수, 클래스와 객체지향 프로그래밍, 제너레이터와 이터레이터, 파일 입출력, 예외 처리를 종합적으로 활용합니다.

"""
1. 파이썬 기본 문법 복습 및 자료형

문제: 사용자로부터 이름, 나이, 이메일을 입력받아 딕셔너리에 저장하는 프로그램을 작성하세요. 나이와 이메일의 형식을 검증하고, 잘못된 입력이 있으면 예외 처리를 하세요.
"""

def get_user_information():
    user_info ={}

    # 이름 입력
    while True:
        name = input("이름을 입력하세요 :").strip() #strip()은 . 제거
        if name:
            user_info['name'] = name
            break
        else:
            print("제대로 이름을 입력해주세요")

    # 나이 입력
    while True:
        age = input("나이를 입력하세요 :").strip() #strip()은 . 제거
        if validate_age(age):                       #age는 숫자여야 하니까 그것도 확인
            user_info['age'] = age
            break
        else:
            print("제대로 나이를 입력해주세요")

    # 나이 입력
    while True:
        email = input("이메일을 입력하세요 :").strip() #strip()은 . 제거
        if validate_email(email):
            user_info['email'] = email
            break
        else:
            print("제대로 이메일를 입력해주세요")

    return user_info

def validate_age(age):
    if age.isdigit():
        if 0 <= age <= 150:
            return True
    return False

def validate_email(email):
    import re
    pattern = r'^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$'
    return re.match(pattern, email)


try:
    user_info = get_user_information()
    print(user_info)

except Exception as e:
    print("오류 발생!")


"""2. 함수 및 클래스와 객체지향 프로그래밍

문제: 간단한 계산기 클래스를 작성하세요. 이 클래스는 덧셈, 뺄셈, 곱셈, 나눗셈 메서드를 포함합니다. 사용자로부터 두 숫자와 연산자를 입력받아 계산 결과를 출력하는 프로그램을 작성하세요.
"""

class Calculator:
    def __init__(self,first,second):
        self.first = first
        self.second = second
    def add(self):
        result = self.first + self.second
        return result

    def sub(self):
        return self.first - self.second

    def mul(self):
        return self.first * self.second

    def div(self):
        return self.first / self.second


a,b = map(float,input("두 숫자를 입력하세요! : ").split())
num = Calculator(a,b)
calculate = input("계산 방식을 입력하세요(+,-,*,/) : ")

try:
    if calculate == '+':
        print(num.add())
    elif calculate == '-':
        print(num.sub())
    elif calculate == '*':
        print(num.mul())
    elif calculate == '/':
        print(num.div())

except:
    print("계산방식을 네개중 하나를 제대로 골라주세요!")

"""3. 제너레이터와 이터레이터

문제:

피보나치 수열을 생성하는 제너레이터 함수를 작성하세요.
피보나치 수열의 첫 10개 값을 출력하세요.
"""

def fibonacci():
    a, b = 0, 1
    while True:
        yield a
        a, b = b, a+b

fib_gen = fibonacci()

for _ in range(10):
    print(next(fib_gen))


"""4. 파일 입출력

문제:

사용자로부터 입력받은 데이터를 파일에 저장하고, 파일 내용을 읽어 출력하는 프로그램을 작성하세요.

데이터는 JSON 형식으로 저장하세요
"""
import json
data = {input()}

with open("data.jason","w") as file:
    loaded_data = json.dumps(data)
    print("파일에서 읽은 ㄷ데이터:")
    print(loaded_data)
    pass

with open("data.jason","r") as file:
    loaded_data = json.load(file)
    print("파일에서 읽은 데이터")
    print(loaded_data)


"""5. Database 연동

문제:

SQLite 데이터베이스에 사용자 정보를 저장하고, 저장된 데이터를 조회하여 출력하는 프로그램을 작성하세요.

테이블은 users로 하고, id, name, age, email 컬럼을 포함합니다.
"""

import sqlite3

connection = sqlite3.connect()   #closing the connection connection.close()
print("successfully conneected to the database")
cursor = connection.cursor()

#users 테이블 생성
cursor.execute('''
CREATE TABLE IF NOT EXISTS users (
id INTEGER PRIMARY KEY AUTOINCREMENT,
name TEXT NOT NULL,
age INTEGER NOT NULL,
email TEXT NOT NULL
)
''')

#사용자 정보 받기
name = input("이름을 입력하세요: ")
age = int(input("나이를 입력하세요: "))
email = input("이메일을 입력하세요: ")

# 사용자 정보 테이블에 삽입
cursor.execute('''
INSERT INTO users (name, age, email) 
VALUES (?, ?, ?)
''', (name, age, email))

# 변경사항 저장
connection.commit()

# 저장된 데이터 조회
cursor.execute('SELECT * FROM users')
rows = cursor.fetchall()

# 조회된 데이터 출력
print("저장된 사용자 정보:")
for row in rows:
    print(row)

# 연결 종료
connection.close()




"""6. 예외 처리

문제:

사용자로부터 숫자를 입력받아, 그 숫자를 10으로 나누는 프로그램을 작성하세요.

0으로 나누는 경우와 숫자가 아닌 값을 입력받는 경우를 처리하세요.
"""
'''
try:
    pass
except:
    pass
except:
    pass
    '''